{"version":3,"sources":["components/TimerInput.js","components/Timer.js","components/ActionButton.js","components/App.js","index.js"],"names":["TimerInput","state","minutes","seconds","handleSubmit","event","preventDefault","Number","props","onFormSubmit","className","onSubmit","this","type","placeholder","value","onChange","e","setState","target","React","Component","Timer","style","fontFamily","displayCountdown","ActionButton","handleOnClick","onClick","App","time","paused","reset","startCountdown","startMinutes","startSeconds","count","parseInt","timer","intervalTime","countdown","setInterval","clearInterval","_minutes","Math","floor","_seconds","prevState","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sLAsDeA,E,4MAnDbC,MAAQ,CACNC,QAAS,GACTC,QAAS,I,EAGXC,aAAe,SAACC,GACdA,EAAMC,iBAEGC,OAAO,EAAKN,MAAMC,SAGzB,EAAKM,MAAMC,aAAa,EAAKR,MAAMC,QAAS,EAAKD,MAAME,U,uDAIjD,IAAD,OACP,OACE,yBAAKO,UAAU,SACb,0BAAMC,SAAUC,KAAKR,cACnB,yBAAKM,UAAU,WACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,eACb,2BACEA,UAAU,QACVG,KAAK,OACLC,YAAY,gBACZC,MAAOH,KAAKX,MAAMC,QAClBc,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEhB,QAASe,EAAEE,OAAOJ,YAGvD,yBAAKL,UAAU,eACb,2BACEA,UAAU,QACVG,KAAK,OACLC,YAAY,gBACZC,MAAOH,KAAKX,MAAME,QAClBa,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEf,QAASc,EAAEE,OAAOJ,aAKzD,yBAAKL,UAAU,sCACb,4BAAQA,UAAU,kBAAlB,2B,GA3CWU,IAAMC,WCQhBC,EARD,SAACd,GACb,OACE,yBAAKe,MAAO,CAAEC,WAAY,SAAWd,UAAU,mBAC5CF,EAAMiB,mBCOEC,EAVM,SAAC,GAAoC,IAAlCZ,EAAiC,EAAjCA,YAAaa,EAAoB,EAApBA,cACnC,OACE,6BACE,4BAAQjB,UAAU,oBAAoBkB,QAASD,GAC5Cb,KCyFMe,E,4MAxFb5B,MAAQ,CACN6B,KAAM,GACNC,QAAQ,EACRC,OAAO,G,EAGTC,eAAiB,SAACC,EAAcC,GAC9B,IAAIC,EAAuB,GAAfF,EAAoBG,SAASF,GACzC,EAAKG,MAAMF,I,oDAGPG,GAAe,IAAD,OACdC,EAAYC,aAAY,WAE1B,GAAI,EAAKxC,MAAM+B,MAMb,OALA,EAAKd,SAAS,CACZY,KAAM,GACNE,OAAO,SAETU,cAAcF,GAIhB,IAAIG,EAAWC,KAAKC,MAAMN,EAAe,IACrCO,EAAWP,EAAe,GAG1B,EAAKtC,MAAM8B,SAIfe,EAAWA,EAAW,GAAK,IAAMA,EAAWA,EAE5C,EAAK5B,SAAS,CAAEY,KAAK,GAAD,OAAKa,EAAL,YAAiBG,OACrCP,EAGmB,GACjBG,cAAcF,MAGf,O,+BAGK,IAAD,OACP,OACE,yBAAK9B,UAAU,uBACb,yBACEA,UAAU,mCACVa,MAAO,CAAEC,WAAY,UAFvB,mBAMA,kBAAC,EAAD,CAAYf,aAAcG,KAAKqB,iBAE/B,yBAAKvB,UAAU,sCACb,kBAAC,EAAD,CAAOe,iBAAkBb,KAAKX,MAAM6B,QAGtC,yBAAKpB,UAAU,iCACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEI,YAAaF,KAAKX,MAAM8B,OAAS,SAAW,QAC5CJ,cAAe,WACb,EAAKT,UAAS,SAAC6B,GAAD,MAAgB,CAC5BhB,QAASgB,EAAUhB,eAK3B,yBAAKrB,UAAU,UACb,kBAAC,EAAD,CACEI,YAAY,QACZa,cAAe,WACb,EAAKT,UAAS,SAAC6B,GAAD,MAAgB,CAC5Bf,OAAQe,EAAUf,qB,GA7EpBZ,IAAMC,WCDlB2B,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,kBAAC,EAAD,MAASJ,I","file":"static/js/main.665392df.chunk.js","sourcesContent":["import React from \"react\";\n\nclass TimerInput extends React.Component {\n  state = {\n    minutes: \"\",\n    seconds: \"\",\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (\n      typeof Number(this.state.minutes) ||\n      typeof Number(this.state.minutes)\n    ) {\n      this.props.onFormSubmit(this.state.minutes, this.state.seconds);\n    } else console.log(\"Not a number\");\n  };\n\n  render() {\n    return (\n      <div className=\"field\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"control\">\n            <div className=\"columns is-centered\">\n              <div className=\"column is-3\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Enter minutes\"\n                  value={this.state.minutes}\n                  onChange={(e) => this.setState({ minutes: e.target.value })}\n                />\n              </div>\n              <div className=\"column is-3\">\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Enter seconds\"\n                  value={this.state.seconds}\n                  onChange={(e) => this.setState({ seconds: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className=\"columns is-centered is-mobile mt-2\">\n              <button className=\"button is-info\">Start countdown</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default TimerInput;\n","import React from \"react\";\n\nconst Timer = (props) => {\n  return (\n    <div style={{ fontFamily: \"cabin\" }} className=\"timer is-size-1\">\n      {props.displayCountdown}\n    </div>\n  );\n};\n\nexport default Timer;\n","import React from \"react\";\n\nconst ActionButton = ({ placeholder, handleOnClick }) => {\n  return (\n    <div>\n      <button className=\"button is-primary\" onClick={handleOnClick}>\n        {placeholder}\n      </button>\n    </div>\n  );\n};\n\nexport default ActionButton;\n","import React from \"react\";\n\nimport TimerInput from \"./TimerInput\";\nimport Timer from \"./Timer\";\nimport ActionButton from \"./ActionButton\";\n\nclass App extends React.Component {\n  state = {\n    time: \"\",\n    paused: false,\n    reset: false,\n  };\n\n  startCountdown = (startMinutes, startSeconds) => {\n    let count = startMinutes * 60 + parseInt(startSeconds);\n    this.timer(count);\n  };\n\n  timer(intervalTime) {\n    let countdown = setInterval(() => {\n      // To reset timer\n      if (this.state.reset) {\n        this.setState({\n          time: \"\",\n          reset: false,\n        });\n        clearInterval(countdown);\n        return;\n      }\n\n      let _minutes = Math.floor(intervalTime / 60);\n      let _seconds = intervalTime % 60;\n\n      // To pause timer\n      if (this.state.paused) {\n        return;\n      }\n\n      _seconds = _seconds < 10 ? \"0\" + _seconds : _seconds;\n\n      this.setState({ time: `${_minutes}:${_seconds}` });\n      intervalTime--;\n\n      // To stop countdown once time is 0\n      if (intervalTime < 0) {\n        clearInterval(countdown);\n        return;\n      }\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div className=\"container px-3 mt-3\">\n        <div\n          className=\"is-size-2 mb-2 has-text-centered\"\n          style={{ fontFamily: \"cabin\" }}\n        >\n          COUNTDOWN TIMER\n        </div>\n        <TimerInput onFormSubmit={this.startCountdown} />\n\n        <div className=\"columns is-centered is-mobile mt-5\">\n          <Timer displayCountdown={this.state.time} />\n        </div>\n\n        <div className=\"columns is-centered is-mobile\">\n          <div className=\"buttons\">\n            <div className=\"column\">\n              <ActionButton\n                placeholder={this.state.paused ? \"Resume\" : \"Pause\"}\n                handleOnClick={() => {\n                  this.setState((prevState) => ({\n                    paused: !prevState.paused,\n                  }));\n                }}\n              />\n            </div>\n            <div className=\"column\">\n              <ActionButton\n                placeholder=\"Reset\"\n                handleOnClick={() => {\n                  this.setState((prevState) => ({\n                    reset: !prevState.reset,\n                  }));\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}